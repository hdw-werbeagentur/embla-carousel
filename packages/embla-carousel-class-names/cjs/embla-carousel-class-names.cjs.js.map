{"version":3,"file":"embla-carousel-class-names.cjs.js","sources":["../src/components/Options.ts","../src/components/utils.ts","../src/components/ClassNames.ts"],"sourcesContent":["import { CreateOptionsType } from 'embla-carousel'\n\nexport type OptionsType = CreateOptionsType<{\n  snapped: string\n  inView: string\n  draggable: string\n  dragging: string\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  snapped: 'is-snapped',\n  inView: 'is-in-view',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging'\n}\n","export function removeClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (classList.contains(className)) classList.remove(className)\n}\n\nexport function addClass(node: HTMLElement, className: string): void {\n  if (!node || !className) return\n  const { classList } = node\n  if (!classList.contains(className)) classList.add(className)\n}\n\nexport function nodeListToArray(nodeList: NodeListOf<Element>): HTMLElement[] {\n  return <HTMLElement[]>Array.from(nodeList)\n}\n","import { defaultOptions, OptionsType } from './Options'\nimport { nodeListToArray, addClass, removeClass } from './utils'\nimport {\n  CreatePluginType,\n  OptionsHandlerType,\n  EmblaCarouselType,\n  EmblaEventType\n} from 'embla-carousel'\n\ndeclare module 'embla-carousel' {\n  interface EmblaPluginsType {\n    classNames: ClassNamesType\n  }\n}\n\nexport type ClassNamesType = CreatePluginType<{}, OptionsType>\n\nexport type ClassNamesOptionsType = ClassNamesType['options']\n\nfunction ClassNames(userOptions: ClassNamesOptionsType = {}): ClassNamesType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n  const selectedEvents: EmblaEventType[] = ['select']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n  const inViewEvents: EmblaEventType[] = ['slidesInView']\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, ClassNames.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    root = emblaApi.rootNode()\n    slides = emblaApi.slideNodes()\n    const isDraggable = !!emblaApi.internalEngine().options.watchDrag\n\n    if (isDraggable) {\n      addClass(root, options.draggable)\n    }\n    if (options.dragging) {\n      draggingEvents.forEach((evt) => emblaApi.on(evt, toggleDraggingClass))\n    }\n    if (options.snapped) {\n      selectedEvents.forEach((evt) => emblaApi.on(evt, toggleSnappedClasses))\n      toggleSnappedClasses()\n    }\n    if (options.inView) {\n      inViewEvents.forEach((evt) => emblaApi.on(evt, toggleInViewClasses))\n      toggleInViewClasses()\n    }\n  }\n\n  function destroy(): void {\n    removeClass(root, options.draggable)\n    draggingEvents.forEach((evt) => emblaApi.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => emblaApi.off(evt, toggleSnappedClasses))\n    inViewEvents.forEach((evt) => emblaApi.off(evt, toggleInViewClasses))\n    slides.forEach((slide) => removeClass(slide, options.snapped))\n  }\n\n  function toggleDraggingClass(\n    _: EmblaCarouselType,\n    evt: EmblaEventType\n  ): void {\n    if (evt === 'pointerDown') addClass(root, options.dragging)\n    else removeClass(root, options.dragging)\n  }\n\n  function toggleSlideClasses(slideIndexes: number[], className: string): void {\n    const container = emblaApi.containerNode()\n    const slideNodeList = container.querySelectorAll(`.${className}`)\n    const removeClassSlides = nodeListToArray(slideNodeList)\n\n    removeClassSlides.forEach((slide) => removeClass(slide, className))\n    slideIndexes.forEach((index) => addClass(slides[index], className))\n  }\n\n  function toggleSnappedClasses(): void {\n    const { slideRegistry } = emblaApi.internalEngine()\n    const slideIndexes = slideRegistry[emblaApi.selectedScrollSnap()]\n    toggleSlideClasses(slideIndexes, options.snapped)\n  }\n\n  function toggleInViewClasses(): void {\n    const slideIndexes = emblaApi.slidesInView()\n    toggleSlideClasses(slideIndexes, options.inView)\n  }\n\n  const self: ClassNamesType = {\n    name: 'classNames',\n    options: userOptions,\n    init,\n    destroy\n  }\n  return self\n}\n\ndeclare namespace ClassNames {\n  let globalOptions: ClassNamesOptionsType | undefined\n}\n\nClassNames.globalOptions = undefined\n\nexport default ClassNames\n"],"names":["defaultOptions","active","breakpoints","snapped","inView","draggable","dragging","removeClass","node","className","classList","contains","remove","addClass","add","nodeListToArray","nodeList","Array","from","ClassNames","userOptions","options","emblaApi","root","slides","selectedEvents","draggingEvents","inViewEvents","init","emblaApiInstance","optionsHandler","mergeOptions","optionsAtMedia","optionsBase","globalOptions","allOptions","rootNode","slideNodes","isDraggable","internalEngine","watchDrag","forEach","evt","on","toggleDraggingClass","toggleSnappedClasses","toggleInViewClasses","destroy","off","slide","_","toggleSlideClasses","slideIndexes","container","containerNode","slideNodeList","querySelectorAll","removeClassSlides","index","slideRegistry","selectedScrollSnap","slidesInView","self","name","undefined"],"mappings":"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"}